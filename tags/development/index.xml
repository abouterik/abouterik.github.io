<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>development on //erik</title>
    <link>https://abouterik.github.io/tags/development/</link>
    <description>Recent content in development on //erik</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 16 Feb 2021 10:42:36 +0100</lastBuildDate><atom:link href="https://abouterik.github.io/tags/development/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linting Dart</title>
      <link>https://abouterik.github.io/posts/dart-linting/</link>
      <pubDate>Tue, 16 Feb 2021 10:42:36 +0100</pubDate>
      
      <guid>https://abouterik.github.io/posts/dart-linting/</guid>
      <description>Linting &amp;amp; Code Style    Linting in dart    The Dart SDK comes with a built-in linter in the analyzer package. To use it we need to create a configuration file that
holds the rules we want to use in our project.
Create the configuration file    In your root directy where your pubspec.yaml lives create a file named analysis_options.yaml. In here you can make use</description>
    </item>
    
    <item>
      <title>Flutter State Management 2021</title>
      <link>https://abouterik.github.io/posts/flutter-state-management/</link>
      <pubDate>Fri, 05 Feb 2021 11:34:49 +0100</pubDate>
      
      <guid>https://abouterik.github.io/posts/flutter-state-management/</guid>
      <description>State Management in Flutter    We have evaluated different state management plugins for Flutter. Two of the most commonly used plugins are Riverpod and BLoC/Cubit.
 Riverpod Cubit/BLoC GetX  Riverpod    Riverpod is the successor of flutter providers and builds up on that base while also reducing some issues.
Concept:     build a global provider (e.g. static variable, object or changing stream final keyProvider = Provider((ref) =&amp;gt; &amp;#39;myKey&amp;#39;);  wrap up your App() with a ProviderScope() void main() {  runApp(ProviderScope(child: MyApp())); }  use ConsumerWidget instead of StatelessWidget or a Consumer inside the build method of another widget to read the values from your provider watch your provider for values or state // *** // ConsumerWidget // ***  class Example extends ConsumerWidget {  @override  Widget build(BuildContext context, ScopedReader watch) {  // Listens to the value exposed by counterProvider  int count = watch(counterProvider).</description>
    </item>
    
    <item>
      <title>Using the React Profiler</title>
      <link>https://abouterik.github.io/posts/react-profiler/</link>
      <pubDate>Tue, 10 Mar 2020 10:21:40 +0100</pubDate>
      
      <guid>https://abouterik.github.io/posts/react-profiler/</guid>
      <description>Profiling a single component or dom tree    continueing from Profiling on iOS
With react native 0.57 and up Facebook integrated a Profiler component we can use to test a single component or component tree. Simply wrap the desired component with a &amp;lt;Provider id={ID} onRender={CALLBACK}&amp;gt;&amp;lt;/Provider&amp;gt; and add a callback function to your code.
The callback function receives these props:
 id, // the &amp;ldquo;id&amp;rdquo; prop of the Profiler tree that has just committed phase, // either &amp;ldquo;mount&amp;rdquo; (if the tree just mounted) or &amp;ldquo;update&amp;rdquo; (if it re-rendered) actualDuration, // time spent rendering the committed update baseDuration, // estimated time to render the entire subtree without memoization startTime, // when React began rendering this update commitTime, // when React committed this update interactions // the Set of interactions belonging to this update  You can process the data any way you like, e.</description>
    </item>
    
    <item>
      <title>Lunchnow</title>
      <link>https://abouterik.github.io/projects/lunchnow/</link>
      <pubDate>Mon, 09 Mar 2020 22:51:48 +0100</pubDate>
      
      <guid>https://abouterik.github.io/projects/lunchnow/</guid>
      <description>FIND YOUR NEXT LUNCH &amp;amp; MEET WITH FRIENDS    From October 2018 on I started developing an app called ‘LunchNow‘. It’s mainly a service for users to find lunch offers near their places or offices. First this was mainly a complete rework of a previous version made in Java &amp;amp; Objective C (Android and iOS respectively) into a new codebase with Typescript and React Native.
Later on I integrated personalization features like your personal daily suggestions and a whole new feature set to organize personal meetups with your friends or colleagues.</description>
    </item>
    
    <item>
      <title>Blood Runs Cold</title>
      <link>https://abouterik.github.io/projects/blood-runs-cold/</link>
      <pubDate>Mon, 09 Mar 2020 22:46:02 +0100</pubDate>
      
      <guid>https://abouterik.github.io/projects/blood-runs-cold/</guid>
      <description>“Blood Runs Cold is a gruesome take on the much-loved Hidden Object genre. The story follows journalist Paige Harper as she attempts to prove her innocence, having been framed for a series of horrifying crimes. Subjected to a trial by media in a world where news is more about shocking headlines than truth, players must assist Paige as she delves into the dark and twisted mind of a serial killer.</description>
    </item>
    
    <item>
      <title>Prostate Tumor Localization</title>
      <link>https://abouterik.github.io/projects/prostate-tumor-localization/</link>
      <pubDate>Mon, 09 Mar 2020 22:29:00 +0100</pubDate>
      
      <guid>https://abouterik.github.io/projects/prostate-tumor-localization/</guid>
      <description>PROSTATE TUMOR LOCALIZATION USING MULTIPARAMETRIC MAGNETIC RESONANCE IMAGING    This was my Master thesis that I’ve written during 2011 in collaboration with the MR Cancer Group of Norwegian University of Science and Technology in Trondheim, Norway. It was a great pleasure to work with such talented people!
Synopsis:    Prostate cancer is the leading cancer disease diagnosed in males. More than 70 percentage of the diagnosed cancers are located in the peripheral zone of the prostate.</description>
    </item>
    
    <item>
      <title>Supportive neurological rehabilitation using the wiimote technology</title>
      <link>https://abouterik.github.io/projects/wiimote-rehabilitation/</link>
      <pubDate>Mon, 09 Mar 2020 22:14:24 +0100</pubDate>
      
      <guid>https://abouterik.github.io/projects/wiimote-rehabilitation/</guid>
      <description>This was my Bachelor thesis back in 2010. Even then I was aiming at connecting gaming and healthcare for humans in need.
Memory was also subject of training. Here the numbers on the balloons vanished and the number increased at each step
Synopsis:    The bachelor thesis aims to develop an application for the target group of neurologically impaired motor skills. The disease symptoms are triggered for example by cerebellum diseases, ataxia or Parkinson’s syndrome.</description>
    </item>
    
    <item>
      <title>Profiling an iOS app</title>
      <link>https://abouterik.github.io/posts/profiling-ios/</link>
      <pubDate>Mon, 09 Mar 2020 21:23:41 +0100</pubDate>
      
      <guid>https://abouterik.github.io/posts/profiling-ios/</guid>
      <description>Profiling    While developing we often don&amp;rsquo;t care about the hard restrictions that we can&amp;rsquo;t overcome: hardware limitations, especially on mobile devices, always limit what we can do and what we should do.
This is not just true in regards to limitations of how many calculations we can achieve in a specified time, but also in respect to the user and his expectations. Imagine an app that drains your battery like it was a CapriSonne on a hot day.</description>
    </item>
    
  </channel>
</rss>
